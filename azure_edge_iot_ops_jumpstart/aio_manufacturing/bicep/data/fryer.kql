// Create table to store data from base64 to json format
.create table fryer (Timestamp: datetime,
Heater_Outlet_Temp: real,
Pump1_Flow_Totalizer: real,
Pump2_Flow_Totalizer: real,
Pump3_Flow_Totalizer: real,
Pump1_Temperature_Flow: real,
Pump2_Temperature_Flow: real,
Pump3_Temperature_Flow: real,
Pumps_Total_Flow: real,
Pressure_Filter_Inlet: real,
Pressure_Filter_Outlet: real,
RobotPosition_J0: real,
RobotPosition_J1: real,
RobotPosition_J2: real,
RobotPosition_J3: real,
RobotPosition_J4: real,
RobotPosition_J5: real,
Tank_Level: real,
Drive1_Current: real,
Drive1_Frequency: int,
Drive1_Speed: int,
Drive1_Voltage: real,
Drive2_Current: real,
Drive2_Frequency: int,
Drive2_Speed: int,
Drive2_Voltage: real,
Drive3_Current: real,
Drive3_Frequency: int,
Drive3_Speed: int,
Drive3_Voltage: real,
Cooler_Inlet_Temp: real,
Cooler_Outlet_Temp: real,
Dynamix_Ch1_Acceleration: real,
Flow001: real,
Pressure001: real,
Pressure002: real,
Heater_Inlet_Temp: real,
Pump1_Conductivity: real,
Valve_000_Pump1: boolean,
Cooler_ON: boolean,
Fan001_On: boolean,
Heater_ON: boolean,
Filter_Chg_Required: boolean,
Filter_Reset: boolean,
Filter_Override: boolean,
UTC_Time: datetime,
Current: real,
Voltage: real,
Temperature: real,
Humidity: real,
VacuumAlert: boolean,
VacuumPressure: real,
Oiltemperature: real,
OiltemperatureTarget: real
)

// Create function to decode base64 to json format
.create-or-alter function Expand_fryer_Data() {
        donutPlant
        | where subject == "topic/fryer"
        | extend data = parse_json( base64_decode_tostring(data_base64) ) 
        | project 
        Timestamp = todatetime(data.data.Timestamp),
        Heater_Outlet_Temp = toreal(data.data.Heater_Outlet_Temp),
        Pump1_Flow_Totalizer = toreal(data.data.Pump1_Flow_Totalizer),
        Pump2_Flow_Totalizer = toreal(data.data.Pump2_Flow_Totalizer),
        Pump3_Flow_Totalizer = toreal(data.data.Pump3_Flow_Totalizer),
        Pump1_Temperature_Flow = toreal(data.data.Pump1_Temperature_Flow),
        Pump2_Temperature_Flow = toreal(data.data.Pump2_Temperature_Flow),
        Pump3_Temperature_Flow = toreal(data.data.Pump3_Temperature_Flow),
        Pumps_Total_Flow = toreal(data.data.Pumps_Total_Flow),
        Pressure_Filter_Inlet = toreal(data.data.Pressure_Filter_Inlet),
        Pressure_Filter_Outlet = toreal(data.data.Pressure_Filter_Outlet),
        RobotPosition_J0 = toreal(data.data.RobotPosition_J0),
        RobotPosition_J1 = toreal(data.data.RobotPosition_J1),
        RobotPosition_J2 = toreal(data.data.RobotPosition_J2),
        RobotPosition_J3 = toreal(data.data.RobotPosition_J3),
        RobotPosition_J4 = toreal(data.data.RobotPosition_J4),
        RobotPosition_J5 = toreal(data.data.RobotPosition_J5),
        Tank_Level = toreal(data.data.Tank_Level),
        Drive1_Current = toreal(data.data.Drive1_Current),
        Drive1_Frequency = toint(data.data.Drive1_Frequency),
        Drive1_Speed = toint(data.data.Drive1_Speed),
        Drive1_Voltage = toreal(data.data.Drive1_Voltage),
        Drive2_Current = toreal(data.data.Drive2_Current),
        Drive2_Frequency = toint(data.data.Drive2_Frequency),
        Drive2_Speed = toint(data.data.Drive2_Speed),
        Drive2_Voltage = toreal(data.data.Drive2_Voltage),
        Drive3_Current = toreal(data.data.Drive3_Current),
        Drive3_Frequency = toint(data.data.Drive3_Frequency),
        Drive3_Speed = toint(data.data.Drive3_Speed),
        Drive3_Voltage = toreal(data.data.Drive3_Voltage),
        Cooler_Inlet_Temp = toreal(data.data.Cooler_Inlet_Temp),
        Cooler_Outlet_Temp = toreal(data.data.Cooler_Outlet_Temp),
        Dynamix_Ch1_Acceleration = toreal(data.data.Dynamix_Ch1_Acceleration),
        Flow001 = toreal(data.data.Flow001),
        Pressure001 = toreal(data.data.Pressure001),
        Pressure002 = toreal(data.data.Pressure002),
        Heater_Inlet_Temp = toreal(data.data.Heater_Inlet_Temp),
        Pump1_Conductivity = toreal(data.data.Pump1_Conductivity),
        Valve_000_Pump1 = toboolean(data.data.Valve_000_Pump1),
        Cooler_ON = toboolean(data.data.Cooler_ON),
        Fan001_On = toboolean(data.data.Fan001_On),
        Heater_ON = toboolean(data.data.Heater_ON),
        Filter_Chg_Required = toboolean(data.data.Filter_Chg_Required),
        Filter_Reset = toboolean(data.data.Filter_Reset),
        Filter_Override = toboolean(data.data.Filter_Override),
        UTC_Time = todatetime(data.data.UTC_Time),
        Current = toreal(data.data.Current),
        Voltage = toreal(data.data.Voltage),
        Temperature = toreal(data.data.Temperature),
        Humidity = toreal(data.data.Humidity),
        VacuumAlert = toboolean(data.data.VacuumAlert),
        VacuumPressure = toreal(data.data.VacuumPressure),
        Oiltemperature = toreal(data.data.Oiltemperature),
        OiltemperatureTarget = toreal(data.data.OiltemperatureTarget)
    }

 // Create policy to run function every 1 minute
.alter table fryer policy update @'[{"Source": "donutPlant", "Query": "Expand_fryer_Data()", "IsEnabled": "True"}]'

.alter table fryer policy ingestionbatching "{'MaximumBatchingTimeSpan': '0:01:00', 'MaximumNumberOfItems': 10000}"

