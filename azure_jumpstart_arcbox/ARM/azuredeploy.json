{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "2738768575994422412"
    }
  },
  "parameters": {
    "sshRSAPublicKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "RSA public key used for securing SSH access to ArcBox resources. This parameter is only needed when deploying the DataOps or DevOps flavors."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[tenant().tenantId]",
      "metadata": {
        "description": "Your Microsoft Entra tenant Id"
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for Windows account"
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 123,
      "metadata": {
        "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long"
      }
    },
    "vmAutologon": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable automatic logon into ArcBox Virtual Machine"
      }
    },
    "rdpPort": {
      "type": "string",
      "defaultValue": "3389",
      "metadata": {
        "description": "Override default RDP port using this parameter. Default is 3389. No changes will be made to the client VM."
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name for your log analytics workspace"
      }
    },
    "flavor": {
      "type": "string",
      "defaultValue": "ITPro",
      "allowedValues": [
        "ITPro",
        "DevOps",
        "DataOps"
      ],
      "metadata": {
        "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro', 'DevOps', 'DataOps'"
      }
    },
    "githubAccount": {
      "type": "string",
      "defaultValue": "microsoft",
      "metadata": {
        "description": "Target GitHub account"
      }
    },
    "githubBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Target GitHub branch"
      }
    },
    "deployBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Choice to deploy Bastion to connect to the client VM"
      }
    },
    "bastionSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Developer"
      ],
      "metadata": {
        "description": "Bastion host Sku name. The Developer SKU is currently supported in a limited number of regions: https://learn.microsoft.com/azure/bastion/quickstart-developer-sku"
      }
    },
    "githubUser": {
      "type": "string",
      "defaultValue": "microsoft",
      "metadata": {
        "description": "User github account where they have forked https://github.com/microsoft/azure-arc-jumpstart-apps"
      }
    },
    "addsDomainName": {
      "type": "string",
      "defaultValue": "jumpstart.local",
      "metadata": {
        "description": "Active directory domain services domain name"
      }
    },
    "guid": {
      "type": "string",
      "defaultValue": "[substring(newGuid(), 0, 4)]",
      "metadata": {
        "description": "Random GUID for cluster names"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure location to deploy all resources"
      }
    },
    "customLocationRPOID": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The custom location RPO ID. This parameter is only needed when deploying the DataOps flavor."
      }
    },
    "debugEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use this parameter to enable or disable debug mode for the automation scripts on the client VM, effectively configuring PowerShell ErrorActionPreference to Break. Intended for use when troubleshooting automation scripts. Default is false."
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {
        "Solution": "jumpstart_arcbox"
      },
      "metadata": {
        "description": "Tags to assign for all ArcBox resources"
      }
    },
    "namingPrefix": {
      "type": "string",
      "defaultValue": "ArcBox",
      "maxLength": 7,
      "metadata": {
        "description": "The naming prefix for the nested virtual machines and all Azure resources deployed. The maximum length for the naming prefix is 7 characters,example: `ArcBox-Win2k19`"
      }
    },
    "autoShutdownEnabled": {
      "type": "bool",
      "defaultValue": false
    },
    "autoShutdownTime": {
      "type": "string",
      "defaultValue": "1800"
    },
    "autoShutdownTimezone": {
      "type": "string",
      "defaultValue": "UTC"
    },
    "autoShutdownEmailRecipient": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "templateBaseUrl": "[format('https://raw.githubusercontent.com/{0}/azure_arc/{1}/azure_jumpstart_arcbox/', parameters('githubAccount'), parameters('githubBranch'))]",
    "aksArcDataClusterName": "[format('{0}-AKS-Data-{1}', parameters('namingPrefix'), parameters('guid'))]",
    "aksDrArcDataClusterName": "[format('{0}-AKS-DR-Data-{1}', parameters('namingPrefix'), parameters('guid'))]",
    "k3sArcDataClusterName": "[format('{0}-K3s-Data-{1}', parameters('namingPrefix'), parameters('guid'))]",
    "k3sArcClusterName": "[format('{0}-K3s-{1}', parameters('namingPrefix'), parameters('guid'))]",
    "k3sClusterNodesCount": 3
  },
  "resources": [
    {
      "condition": "[or(equals(parameters('flavor'), 'DevOps'), equals(parameters('flavor'), 'DataOps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ubuntuRancherK3sDataSvcDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sshRSAPublicKey": {
            "value": "[parameters('sshRSAPublicKey')]"
          },
          "stagingStorageAccountName": {
            "value": "[toLower(reference(resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment'), '2022-09-01').outputs.storageAccountName.value)]"
          },
          "logAnalyticsWorkspace": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.subnetId.value]"
          },
          "azureLocation": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('k3sArcDataClusterName')]"
          },
          "storageContainerName": {
            "value": "[toLower(variables('k3sArcDataClusterName'))]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16381001317417135477"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "[format('{0}-K3s', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of you Virtual Machine"
              }
            },
            "adminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "sshRSAPublicKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "RSA public key used for securing SSH access to ArcBox resources. This parameter is only needed when deploying the DataOps or DevOps flavors."
              }
            },
            "ubuntuOSVersion": {
              "type": "string",
              "defaultValue": "22_04-lts-gen2",
              "allowedValues": [
                "22_04-lts-gen2"
              ],
              "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version"
              }
            },
            "azureLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B4ms",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            },
            "stagingStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
              }
            },
            "logAnalyticsWorkspace": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace used with cluster extensions"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "metadata": {
                "description": "The base URL used for accessing artifacts and automation artifacts"
              }
            },
            "storageContainerName": {
              "type": "string",
              "metadata": {
                "description": "Storage account container name for artifacts"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "publicIpAddressName": "[format('{0}-PIP', parameters('vmName'))]",
            "networkInterfaceName": "[format('{0}-NIC', parameters('vmName'))]",
            "osDiskType": "Premium_LRS",
            "k3sControlPlane": "true",
            "diskSize": "[if(equals(parameters('flavor'), 'DataOps'), 512, 64)]",
            "numberOfIPAddresses": "[if(equals(parameters('flavor'), 'DataOps'), 8, 5)]"
          },
          "resources": [
            {
              "copy": {
                "name": "publicIpAddresses",
                "count": "[length(range(1, variables('numberOfIPAddresses')))]"
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}{1}', variables('publicIpAddressName'), range(1, variables('numberOfIPAddresses'))[copyIndex()])]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Basic"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipConfigurations",
                    "count": "[length(range(1, variables('numberOfIPAddresses')))]",
                    "input": {
                      "name": "[format('ipconfig{0}', range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')])]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                          "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIpAddressName'), range(1, variables('numberOfIPAddresses'))[sub(range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')], 1)]))]"
                        },
                        "primary": "[if(equals(range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')], 1), true(), false())]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "publicIpAddresses"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": "[variables('diskSize')]"
                  },
                  "imageReference": {
                    "publisher": "canonical",
                    "offer": "0001-com-ubuntu-server-jammy",
                    "sku": "[parameters('ubuntuOSVersion')]",
                    "version": "latest"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "linuxConfiguration": {
                    "disablePasswordAuthentication": true,
                    "ssh": {
                      "publicKeys": [
                        {
                          "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                          "keyData": "[parameters('sshRSAPublicKey')]"
                        }
                      ]
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installscript_k3s')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": {
                  "commandToExecute": "[format('bash installK3s.sh {0} {1} {2} {3} {4} {5} {6} {7} {8}', parameters('adminUsername'), subscription().subscriptionId, parameters('vmName'), parameters('azureLocation'), parameters('stagingStorageAccountName'), parameters('logAnalyticsWorkspace'), parameters('templateBaseUrl'), parameters('storageContainerName'), variables('k3sControlPlane'))]",
                  "fileUris": [
                    "[format('{0}artifacts/installK3s.sh', parameters('templateBaseUrl'))]"
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]"
      ]
    },
    {
      "copy": {
        "name": "ubuntuRancherK3sDataSvcNodesDeployment",
        "count": "[length(range(0, variables('k3sClusterNodesCount')))]"
      },
      "condition": "[or(equals(parameters('flavor'), 'DataOps'), equals(parameters('flavor'), 'DevOps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ubuntuRancherK3sDataSvcNodesDeployment-{0}', range(0, variables('k3sClusterNodesCount'))[copyIndex()])]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sshRSAPublicKey": {
            "value": "[parameters('sshRSAPublicKey')]"
          },
          "stagingStorageAccountName": {
            "value": "[toLower(reference(resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment'), '2022-09-01').outputs.storageAccountName.value)]"
          },
          "logAnalyticsWorkspace": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.subnetId.value]"
          },
          "azureLocation": {
            "value": "[parameters('location')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "vmName": {
            "value": "[format('{0}-Node-0{1}', variables('k3sArcDataClusterName'), range(0, variables('k3sClusterNodesCount'))[copyIndex()])]"
          },
          "storageContainerName": {
            "value": "[toLower(variables('k3sArcDataClusterName'))]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "9882362287265074744"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "[format('{0}-K3s-Node', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of you Virtual Machine"
              }
            },
            "adminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "sshRSAPublicKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "RSA public key used for securing SSH access to ArcBox resources. This parameter is only needed when deploying the DataOps or DevOps flavors."
              }
            },
            "ubuntuOSVersion": {
              "type": "string",
              "defaultValue": "22_04-lts-gen2",
              "allowedValues": [
                "22_04-lts-gen2"
              ],
              "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version"
              }
            },
            "azureLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            },
            "stagingStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
              }
            },
            "logAnalyticsWorkspace": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace used with cluster extensions"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "metadata": {
                "description": "The base URL used for accessing artifacts and automation artifacts"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "storageContainerName": {
              "type": "string",
              "metadata": {
                "description": "Storage account container name for artifacts"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "networkInterfaceName": "[format('{0}-NIC', parameters('vmName'))]",
            "osDiskType": "Premium_LRS",
            "vmSize": "[if(equals(parameters('flavor'), 'DevOps'), 'Standard_B2ms', 'Standard_B8ms')]",
            "diskSize": "[if(equals(parameters('flavor'), 'DataOps'), 512, 64)]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[variables('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": "[variables('diskSize')]"
                  },
                  "imageReference": {
                    "publisher": "canonical",
                    "offer": "0001-com-ubuntu-server-jammy",
                    "sku": "[parameters('ubuntuOSVersion')]",
                    "version": "latest"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "linuxConfiguration": {
                    "disablePasswordAuthentication": true,
                    "ssh": {
                      "publicKeys": [
                        {
                          "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                          "keyData": "[parameters('sshRSAPublicKey')]"
                        }
                      ]
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installscript_k3s')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": {
                  "commandToExecute": "[format('bash installK3s.sh {0} {1} {2} {3} {4} {5} {6} {7}', parameters('adminUsername'), subscription().subscriptionId, parameters('vmName'), parameters('azureLocation'), parameters('stagingStorageAccountName'), parameters('logAnalyticsWorkspace'), parameters('templateBaseUrl'), parameters('storageContainerName'))]",
                  "fileUris": [
                    "[format('{0}artifacts/installK3s.sh', parameters('templateBaseUrl'))]"
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'ubuntuRancherK3sDataSvcDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('flavor'), 'DevOps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ubuntuRancherK3sDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sshRSAPublicKey": {
            "value": "[parameters('sshRSAPublicKey')]"
          },
          "stagingStorageAccountName": {
            "value": "[toLower(reference(resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment'), '2022-09-01').outputs.storageAccountName.value)]"
          },
          "logAnalyticsWorkspace": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.subnetId.value]"
          },
          "azureLocation": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('k3sArcClusterName')]"
          },
          "storageContainerName": {
            "value": "[toLower(variables('k3sArcClusterName'))]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16381001317417135477"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "[format('{0}-K3s', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of you Virtual Machine"
              }
            },
            "adminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "sshRSAPublicKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "RSA public key used for securing SSH access to ArcBox resources. This parameter is only needed when deploying the DataOps or DevOps flavors."
              }
            },
            "ubuntuOSVersion": {
              "type": "string",
              "defaultValue": "22_04-lts-gen2",
              "allowedValues": [
                "22_04-lts-gen2"
              ],
              "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version"
              }
            },
            "azureLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B4ms",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            },
            "stagingStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
              }
            },
            "logAnalyticsWorkspace": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace used with cluster extensions"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "metadata": {
                "description": "The base URL used for accessing artifacts and automation artifacts"
              }
            },
            "storageContainerName": {
              "type": "string",
              "metadata": {
                "description": "Storage account container name for artifacts"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "publicIpAddressName": "[format('{0}-PIP', parameters('vmName'))]",
            "networkInterfaceName": "[format('{0}-NIC', parameters('vmName'))]",
            "osDiskType": "Premium_LRS",
            "k3sControlPlane": "true",
            "diskSize": "[if(equals(parameters('flavor'), 'DataOps'), 512, 64)]",
            "numberOfIPAddresses": "[if(equals(parameters('flavor'), 'DataOps'), 8, 5)]"
          },
          "resources": [
            {
              "copy": {
                "name": "publicIpAddresses",
                "count": "[length(range(1, variables('numberOfIPAddresses')))]"
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}{1}', variables('publicIpAddressName'), range(1, variables('numberOfIPAddresses'))[copyIndex()])]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Basic"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipConfigurations",
                    "count": "[length(range(1, variables('numberOfIPAddresses')))]",
                    "input": {
                      "name": "[format('ipconfig{0}', range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')])]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIPAddress": {
                          "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('publicIpAddressName'), range(1, variables('numberOfIPAddresses'))[sub(range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')], 1)]))]"
                        },
                        "primary": "[if(equals(range(1, variables('numberOfIPAddresses'))[copyIndex('ipConfigurations')], 1), true(), false())]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "publicIpAddresses"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('azureLocation')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": "[variables('diskSize')]"
                  },
                  "imageReference": {
                    "publisher": "canonical",
                    "offer": "0001-com-ubuntu-server-jammy",
                    "sku": "[parameters('ubuntuOSVersion')]",
                    "version": "latest"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "linuxConfiguration": {
                    "disablePasswordAuthentication": true,
                    "ssh": {
                      "publicKeys": [
                        {
                          "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                          "keyData": "[parameters('sshRSAPublicKey')]"
                        }
                      ]
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'installscript_k3s')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": {
                  "commandToExecute": "[format('bash installK3s.sh {0} {1} {2} {3} {4} {5} {6} {7} {8}', parameters('adminUsername'), subscription().subscriptionId, parameters('vmName'), parameters('azureLocation'), parameters('stagingStorageAccountName'), parameters('logAnalyticsWorkspace'), parameters('templateBaseUrl'), parameters('storageContainerName'), variables('k3sControlPlane'))]",
                  "fileUris": [
                    "[format('{0}artifacts/installK3s.sh', parameters('templateBaseUrl'))]"
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "clientVmDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "windowsAdminUsername": {
            "value": "[parameters('windowsAdminUsername')]"
          },
          "windowsAdminPassword": {
            "value": "[parameters('windowsAdminPassword')]"
          },
          "azdataPassword": {
            "value": "[parameters('windowsAdminPassword')]"
          },
          "tenantId": {
            "value": "[parameters('tenantId')]"
          },
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "stagingStorageAccountName": {
            "value": "[toLower(reference(resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment'), '2022-09-01').outputs.storageAccountName.value)]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "subnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment'), '2022-09-01').outputs.subnetId.value]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "githubBranch": {
            "value": "[parameters('githubBranch')]"
          },
          "githubUser": {
            "value": "[parameters('githubUser')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "k3sArcDataClusterName": {
            "value": "[variables('k3sArcDataClusterName')]"
          },
          "k3sArcClusterName": {
            "value": "[variables('k3sArcClusterName')]"
          },
          "aksArcClusterName": {
            "value": "[variables('aksArcDataClusterName')]"
          },
          "aksdrArcClusterName": {
            "value": "[variables('aksDrArcDataClusterName')]"
          },
          "vmAutologon": {
            "value": "[parameters('vmAutologon')]"
          },
          "rdpPort": {
            "value": "[parameters('rdpPort')]"
          },
          "addsDomainName": {
            "value": "[parameters('addsDomainName')]"
          },
          "customLocationRPOID": {
            "value": "[parameters('customLocationRPOID')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          },
          "debugEnabled": {
            "value": "[parameters('debugEnabled')]"
          },
          "autoShutdownEnabled": {
            "value": "[parameters('autoShutdownEnabled')]"
          },
          "autoShutdownTime": {
            "value": "[parameters('autoShutdownTime')]"
          },
          "autoShutdownTimezone": {
            "value": "[parameters('autoShutdownTimezone')]"
          },
          "autoShutdownEmailRecipient": {
            "value": "[parameters('autoShutdownEmailRecipient')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "5450393794893126300"
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "[format('{0}-Client', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of your Virtual Machine"
              }
            },
            "k3sArcDataClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-K3s-Data', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the Cluster API workload cluster to be connected as an Azure Arc-enabled Kubernetes cluster"
              }
            },
            "windowsAdminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "vmAutologon": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable automatic logon into ArcBox Virtual Machine"
              }
            },
            "rdpPort": {
              "type": "string",
              "defaultValue": "3389",
              "metadata": {
                "description": "Override default RDP port using this parameter. Default is 3389. No changes will be made to the client VM."
              }
            },
            "windowsAdminPassword": {
              "type": "securestring",
              "minLength": 12,
              "maxLength": 123,
              "metadata": {
                "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long"
              }
            },
            "windowsOSVersion": {
              "type": "string",
              "defaultValue": "2022-datacenter-g2",
              "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Resource Id of the subnet in the virtual network"
              }
            },
            "spnAuthority": {
              "type": "string",
              "defaultValue": "[environment().authentication.loginEndpoint]"
            },
            "tenantId": {
              "type": "string",
              "metadata": {
                "description": "Your Microsoft Entra tenant Id"
              }
            },
            "azdataUsername": {
              "type": "string",
              "defaultValue": "arcdemo"
            },
            "azdataPassword": {
              "type": "securestring"
            },
            "acceptEula": {
              "type": "string",
              "defaultValue": "yes"
            },
            "registryUsername": {
              "type": "string",
              "defaultValue": "registryUser"
            },
            "registryPassword": {
              "type": "securestring",
              "defaultValue": "[newGuid()]"
            },
            "arcDcName": {
              "type": "string",
              "defaultValue": "arcdatactrl"
            },
            "mssqlmiName": {
              "type": "string",
              "defaultValue": "arcsqlmidemo"
            },
            "postgresName": {
              "type": "string",
              "defaultValue": "arcpg",
              "metadata": {
                "description": "Name of PostgreSQL server group"
              }
            },
            "postgresWorkerNodeCount": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Number of PostgreSQL worker nodes"
              }
            },
            "postgresDatasize": {
              "type": "int",
              "defaultValue": 1024,
              "metadata": {
                "description": "Size of data volumes in MB"
              }
            },
            "postgresServiceType": {
              "type": "string",
              "defaultValue": "LoadBalancer",
              "metadata": {
                "description": "Choose how PostgreSQL service is accessed through Kubernetes networking interface"
              }
            },
            "stagingStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name for the environment Azure Log Analytics workspace"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "metadata": {
                "description": "The base URL used for accessing artifacts and automation artifacts."
              }
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {
                "Solution": "jumpstart_arcbox"
              },
              "metadata": {
                "description": "Tags to assign for all ArcBox resources"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            },
            "flavor": {
              "type": "string",
              "defaultValue": "Full",
              "allowedValues": [
                "Full",
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Bastion to connect to the client VM"
              }
            },
            "githubUser": {
              "type": "string",
              "metadata": {
                "description": "User github account where they have forked https://github.com/microsoft/azure-arc-jumpstart-apps"
              }
            },
            "githubBranch": {
              "type": "string",
              "metadata": {
                "description": "Git branch to use from the forked repo https://github.com/microsoft/azure-arc-jumpstart-apps"
              }
            },
            "k3sArcClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-K3s', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the K3s cluster"
              }
            },
            "aksArcClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-Data', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the AKS cluster"
              }
            },
            "aksdrArcClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-DR-Data', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the AKS DR cluster"
              }
            },
            "addsDomainName": {
              "type": "string",
              "defaultValue": "jumpstart.local",
              "metadata": {
                "description": "Domain name for the jumpstart environment"
              }
            },
            "customLocationRPOID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The custom location RPO ID. This parameter is only needed when deploying the DataOps flavor."
              }
            },
            "vmsDiskSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "metadata": {
                "description": "The SKU of the VMs disk"
              }
            },
            "debugEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use this parameter to enable or disable debug mode for the automation scripts on the client VM, effectively configuring PowerShell ErrorActionPreference to Break. Default is false."
              }
            },
            "autoShutdownEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "autoShutdownTime": {
              "type": "string",
              "defaultValue": "1800"
            },
            "autoShutdownTimezone": {
              "type": "string",
              "defaultValue": "UTC"
            },
            "autoShutdownEmailRecipient": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "bastionName": "[format('{0}-Bastion', parameters('namingPrefix'))]",
            "publicIpAddressName": "[if(equals(parameters('deployBastion'), false()), format('{0}-PIP', parameters('vmName')), format('{0}-PIP', variables('bastionName')))]",
            "networkInterfaceName": "[format('{0}-NIC', parameters('vmName'))]",
            "osDiskType": "Premium_LRS",
            "PublicIPNoBastion": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      },
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": "[if(equals(parameters('deployBastion'), false()), variables('PublicIPNoBastion'), null())]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), false())]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Basic"
              }
            },
            {
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2023-04-02",
              "name": "[format('{0}-VMsDisk', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('vmsDiskSku')]"
              },
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "diskSizeGB": 1024,
                "burstingEnabled": true
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[if(equals(parameters('flavor'), 'DevOps'), 'Standard_B4ms', if(equals(parameters('flavor'), 'DataOps'), 'Standard_D4s_v5', 'Standard_D8s_v5'))]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('vmName'))]",
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": 1024
                  },
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('windowsOSVersion')]",
                    "version": "latest"
                  },
                  "dataDisks": [
                    {
                      "createOption": "Attach",
                      "lun": 0,
                      "managedDisk": {
                        "id": "[resourceId('Microsoft.Compute/disks', format('{0}-VMsDisk', parameters('vmName')))]"
                      }
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('vmName')]",
                  "adminUsername": "[parameters('windowsAdminUsername')]",
                  "adminPassword": "[parameters('windowsAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                "[resourceId('Microsoft.Compute/disks', format('{0}-VMsDisk', parameters('vmName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'Bootstrap')]",
              "location": "[parameters('location')]",
              "tags": {
                "displayName": "config-bootstrap"
              },
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                  "fileUris": [
                    "[uri(parameters('templateBaseUrl'), 'artifacts/Bootstrap.ps1')]"
                  ],
                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Bypass -File Bootstrap.ps1 -adminUsername {0} -adminPassword {1} -tenantId {2} -spnAuthority {3} -subscriptionId {4} -resourceGroup {5} -azdataUsername {6} -azdataPassword {7} -acceptEula {8} -registryUsername {9} -registryPassword {10} -arcDcName {11} -azureLocation {12} -mssqlmiName {13} -POSTGRES_NAME {14} -POSTGRES_WORKER_NODE_COUNT {15} -POSTGRES_DATASIZE {16} -POSTGRES_SERVICE_TYPE {17} -stagingStorageAccountName {18} -workspaceName {19} -templateBaseUrl {20} -flavor {21} -k3sArcDataClusterName {22} -k3sArcClusterName {23} -aksArcClusterName {24} -aksdrArcClusterName {25} -githubUser {26} -githubBranch {27} -vmAutologon {28} -rdpPort {29} -addsDomainName {30} -customLocationRPOID {31} -resourceTags {32} -namingPrefix {33} -debugEnabled {34}', parameters('windowsAdminUsername'), parameters('windowsAdminPassword'), parameters('tenantId'), parameters('spnAuthority'), subscription().subscriptionId, resourceGroup().name, parameters('azdataUsername'), parameters('azdataPassword'), parameters('acceptEula'), parameters('registryUsername'), parameters('registryPassword'), parameters('arcDcName'), parameters('location'), parameters('mssqlmiName'), parameters('postgresName'), parameters('postgresWorkerNodeCount'), parameters('postgresDatasize'), parameters('postgresServiceType'), parameters('stagingStorageAccountName'), parameters('workspaceName'), parameters('templateBaseUrl'), parameters('flavor'), parameters('k3sArcDataClusterName'), parameters('k3sArcClusterName'), parameters('aksArcClusterName'), parameters('aksdrArcClusterName'), parameters('githubUser'), parameters('githubBranch'), parameters('vmAutologon'), parameters('rdpPort'), parameters('addsDomainName'), parameters('customLocationRPOID'), parameters('resourceTags'), parameters('namingPrefix'), parameters('debugEnabled'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Administrator')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), 'Microsoft.Authorization/roleAssignments', 'Storage Blob Data Contributor')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2022-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "condition": "[parameters('autoShutdownEnabled')]",
              "type": "Microsoft.DevTestLab/schedules",
              "apiVersion": "2018-09-15",
              "name": "[format('shutdown-computevm-{0}', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "status": "Enabled",
                "taskType": "ComputeVmShutdownTask",
                "dailyRecurrence": {
                  "time": "[parameters('autoShutdownTime')]"
                },
                "timeZoneId": "[parameters('autoShutdownTimezone')]",
                "notificationSettings": {
                  "status": "Enabled",
                  "timeInMinutes": 30,
                  "webhookUrl": "",
                  "emailRecipient": "[parameters('autoShutdownEmailRecipient')]",
                  "notificationLocale": "en"
                },
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            }
          ],
          "outputs": {
            "adminUsername": {
              "type": "string",
              "value": "[parameters('windowsAdminUsername')]"
            },
            "publicIP": {
              "type": "string",
              "value": "[if(equals(parameters('deployBastion'), false()), concat(reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName')), '2022-01-01').ipAddress), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'ubuntuRancherK3sDataSvcDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'ubuntuRancherK3sDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'updateVNetDNSServers')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "stagingStorageAccountDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "8653137040194732155"
            }
          },
          "parameters": {
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Premium_LRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "storageAccountName": "[format('{0}{1}', parameters('namingPrefix'), uniqueString(resourceGroup().id))]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-05-01",
              "name": "[toLower(variables('storageAccountName'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "isLocalUserEnabled": false,
                "allowSharedKeyAccess": false
              }
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageAccountName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "mgmtArtifactsAndPolicyDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "bastionSku": {
            "value": "[parameters('bastionSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "1172818642563861188"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "[format('{0}-VNet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the VNet"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "aksSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "dcSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-DC-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Domain Controller subnet in the virtual network"
              }
            },
            "drVirtualNetworkName": {
              "type": "string",
              "defaultValue": "[format('{0}-DR-VNet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the DR VNet"
              }
            },
            "drSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-DR-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the DR subnet in the DR virtual network"
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name for your log analytics workspace"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure Region to deploy the Log Analytics Workspace"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "SKU, leave default pergb2018"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Bastion to connect to the client VM"
              }
            },
            "bastionSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Developer"
              ],
              "metadata": {
                "description": "Bastion host Sku name"
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-NSG', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Network Security Group"
              }
            },
            "bastionNetworkSecurityGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-Bastion-NSG', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Bastion Network Security Group"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "DNS Server configuration"
              }
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {
                "Solution": "jumpstart_arcbox"
              },
              "metadata": {
                "description": "Tags to assign for all ArcBox resources"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "keyVaultName": "[toLower(format('{0}{1}', parameters('namingPrefix'), uniqueString(resourceGroup().id)))]",
            "security": {
              "name": "[format('Security({0})', parameters('workspaceName'))]",
              "galleryName": "Security"
            },
            "subnetAddressPrefix": "10.16.1.0/24",
            "addressPrefix": "10.16.0.0/16",
            "aksSubnetPrefix": "10.16.76.0/22",
            "dcSubnetPrefix": "10.16.2.0/24",
            "drAddressPrefix": "172.16.0.0/16",
            "drSubnetPrefix": "172.16.128.0/17",
            "bastionSubnetName": "AzureBastionSubnet",
            "bastionSubnetRef": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), variables('bastionSubnetName'))]",
            "bastionName": "[format('{0}-Bastion', parameters('namingPrefix'))]",
            "bastionSubnetIpPrefix": "10.16.3.64/26",
            "bastionPublicIpAddressName": "[format('{0}-PIP', variables('bastionName'))]",
            "primarySubnet": [
              {
                "name": "[parameters('subnetName')]",
                "properties": {
                  "addressPrefix": "[variables('subnetAddressPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ],
            "bastionSubnet": "[if(not(equals(parameters('bastionSku'), 'Developer')), createArray(createObject('name', 'AzureBastionSubnet', 'properties', createObject('addressPrefix', variables('bastionSubnetIpPrefix'), 'networkSecurityGroup', createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName')))))), createArray())]",
            "dataOpsSubnets": [
              {
                "name": "[parameters('aksSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('aksSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              },
              {
                "name": "[parameters('dcSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('dcSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": "[if(and(equals(parameters('deployBastion'), false()), not(equals(parameters('flavor'), 'DataOps'))), variables('primarySubnet'), if(and(equals(parameters('deployBastion'), false()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('dataOpsSubnets')), if(and(equals(parameters('deployBastion'), true()), not(equals(parameters('flavor'), 'DataOps'))), union(variables('primarySubnet'), variables('bastionSubnet')), if(and(equals(parameters('deployBastion'), true()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('bastionSubnet'), variables('dataOpsSubnets')), variables('primarySubnet')))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('drVirtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('drAddressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": [
                  {
                    "name": "[parameters('drSubnetName')]",
                    "properties": {
                      "addressPrefix": "[variables('drSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'peering-to-DR-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('drVirtualNetworkName'), 'peering-to-primary-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow_k8s_80",
                    "properties": {
                      "priority": 1003,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "80"
                    }
                  },
                  {
                    "name": "allow_k8s_8080",
                    "properties": {
                      "priority": 1004,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "8080"
                    }
                  },
                  {
                    "name": "allow_k8s_443",
                    "properties": {
                      "priority": 1005,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "allow_k8s_kubelet",
                    "properties": {
                      "priority": 1006,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "10250"
                    }
                  },
                  {
                    "name": "allow_traefik_lb_external",
                    "properties": {
                      "priority": 1007,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "32323"
                    }
                  },
                  {
                    "name": "allow_SQLMI_traffic",
                    "properties": {
                      "priority": 1008,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "11433"
                    }
                  },
                  {
                    "name": "allow_Postgresql_traffic",
                    "properties": {
                      "priority": 1009,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "15432"
                    }
                  },
                  {
                    "name": "allow_SQLMI_mirroring_traffic",
                    "properties": {
                      "priority": 1012,
                      "protocol": "TCP",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "5022"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('bastionNetworkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "bastion_allow_https_inbound",
                    "properties": {
                      "priority": 1010,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "Internet",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_gateway_manager_inbound",
                    "properties": {
                      "priority": 1011,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "GatewayManager",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_load_balancer_inbound",
                    "properties": {
                      "priority": 1012,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_host_comms",
                    "properties": {
                      "priority": 1013,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_ssh_rdp_outbound",
                    "properties": {
                      "priority": 1014,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_azure_cloud_outbound",
                    "properties": {
                      "priority": 1015,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "AzureCloud",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_bastion_comms",
                    "properties": {
                      "priority": 1016,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_get_session_info",
                    "properties": {
                      "priority": 1017,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('security').name]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              },
              "plan": {
                "name": "[variables('security').name]",
                "promotionCode": "",
                "product": "[format('OMSGallery/{0}', variables('security').galleryName)]",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('bastionPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Standard"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2023-11-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('bastionSku')]"
              },
              "properties": {
                "virtualNetwork": "[if(equals(parameters('bastionSku'), 'Developer'), createObject('id', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))), null())]",
                "ipConfigurations": "[if(not(equals(parameters('bastionSku'), 'Developer')), createArray(createObject('name', 'IpConf', 'properties', createObject('publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))), 'subnet', createObject('id', variables('bastionSubnetRef'))))), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "policyDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureLocation": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                  },
                  "flavor": {
                    "value": "[parameters('flavor')]"
                  },
                  "resourceTags": {
                    "value": "[parameters('resourceTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9222970623693331004"
                    }
                  },
                  "parameters": {
                    "azureLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of your Azure resources"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of your log analytics workspace"
                      }
                    },
                    "flavor": {
                      "type": "string",
                      "metadata": {
                        "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro', 'DevOps'"
                      }
                    },
                    "resourceTags": {
                      "type": "object",
                      "defaultValue": {
                        "Solution": "jumpstart_arcbox"
                      },
                      "metadata": {
                        "description": "Tags to assign for all ArcBox resources"
                      }
                    },
                    "azureUpdateManagerArcPolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
                    },
                    "azureUpdateManagerAzurePolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
                    },
                    "sshPostureControlAzurePolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/a8f3e6a6-dcd2-434c-b0f7-6f309ce913b4"
                    },
                    "tagsRoleDefinitionId": {
                      "type": "string",
                      "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]"
                    }
                  },
                  "variables": {
                    "policies": [
                      {
                        "name": "(ArcBox) Enable Azure Monitor for Hybrid VMs with AMA",
                        "definitionId": "/providers/Microsoft.Authorization/policySetDefinitions/59e9c3eb-d8df-473b-8059-23fd38ddd0f0",
                        "flavors": [
                          "Full",
                          "ITPro"
                        ],
                        "roleDefinition": [
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293', subscription().subscriptionId)]",
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302', subscription().subscriptionId)]",
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa', subscription().subscriptionId)]"
                        ],
                        "parameters": {
                          "logAnalyticsWorkspace": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "enableProcessesAndDependencies": {
                            "value": true
                          }
                        }
                      },
                      {
                        "name": "(ArcBox) Enable Microsoft Defender on Kubernetes clusters",
                        "definitionId": "/providers/Microsoft.Authorization/policyDefinitions/708b60a6-d253-4fe0-9114-4be4c00f012c",
                        "flavors": [
                          "Full",
                          "DevOps"
                        ],
                        "roleDefinition": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293', subscription().subscriptionId)]",
                        "parameters": {}
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policies_name",
                        "count": "[length(variables('policies'))]"
                      },
                      "condition": "[contains(variables('policies')[copyIndex()].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('policies')[copyIndex()].name]",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "policyDefinitionId": "[variables('policies')[copyIndex()].definitionId]",
                        "parameters": "[variables('policies')[copyIndex()].parameters]"
                      }
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[0], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[0]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[1], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[1]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[2], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[2]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[1].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[1].name, variables('policies')[1].roleDefinition, resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[1].roleDefinition]",
                        "principalId": "[if(contains(variables('policies')[1].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[1].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[1].name)]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "applyCustomTags",
                        "count": "[length(items(parameters('resourceTags')))]"
                      },
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "[format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key)]",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/4f9dc7db-30c1-420c-b61a-e1d640128d26",
                        "parameters": {
                          "tagName": {
                            "value": "[items(parameters('resourceTags'))[copyIndex()].key]"
                          },
                          "tagValue": {
                            "value": "[items(parameters('resourceTags'))[copyIndex()].value]"
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "policy_tagging_resources",
                        "count": "[length(items(parameters('resourceTags')))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key), parameters('tagsRoleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('tagsRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key)), '2021-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key))]",
                        "[resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Linux hybrid machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Arc-enabled Linux machines",
                        "description": "Enable Azure Update Manager for Arc-enabled machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerArcPolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Linux"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Windows hybrid machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Arc-enabled Windows machines",
                        "description": "Enable Azure Update Manager for Arc-enabled machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerArcPolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Windows"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Azure Windows machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Azure Windows machines",
                        "description": "Enable Azure Update Manager for Azure machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerAzurePolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Windows"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Azure Linux machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Azure Linux machines",
                        "description": "Enable Azure Update Manager for Azure machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerAzurePolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Linux"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable SSH Posture Control audit",
                      "location": "[parameters('azureLocation')]",
                      "properties": {
                        "displayName": "(ArcBox) Enable SSH Posture Control audit",
                        "description": "Enable SSH Posture Control in audit mode",
                        "policyDefinitionId": "[parameters('sshPostureControlAzurePolicyId')]",
                        "parameters": {
                          "IncludeArcMachines": {
                            "value": "true"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVaultDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[toLower(variables('keyVaultName'))]"
                  },
                  "enablePurgeProtection": {
                    "value": false
                  },
                  "enableSoftDelete": {
                    "value": false
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12538315610403519820"
                    },
                    "name": "Key Vaults",
                    "description": "This module deploys a Key Vault.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "accessPoliciesType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                            }
                          },
                          "objectId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                            }
                          },
                          "applicationId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                            }
                          },
                          "permissions": {
                            "type": "object",
                            "properties": {
                              "keys": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "decrypt",
                                  "delete",
                                  "encrypt",
                                  "get",
                                  "getrotationpolicy",
                                  "import",
                                  "list",
                                  "purge",
                                  "recover",
                                  "release",
                                  "restore",
                                  "rotate",
                                  "setrotationpolicy",
                                  "sign",
                                  "unwrapKey",
                                  "update",
                                  "verify",
                                  "wrapKey"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to keys."
                                }
                              },
                              "secrets": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "get",
                                  "list",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "set"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to secrets."
                                }
                              },
                              "certificates": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "delete",
                                  "deleteissuers",
                                  "get",
                                  "getissuers",
                                  "import",
                                  "list",
                                  "listissuers",
                                  "managecontacts",
                                  "manageissuers",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "setissuers",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to certificates."
                                }
                              },
                              "storage": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "deletesas",
                                  "get",
                                  "getsas",
                                  "list",
                                  "listsas",
                                  "purge",
                                  "recover",
                                  "regeneratekey",
                                  "restore",
                                  "set",
                                  "setsas",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to storage accounts."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "$ref": "#/definitions/accessPoliciesType",
                      "metadata": {
                        "description": "Optional. All access policies to create."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                        "input": {
                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                        }
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "secretList": "[coalesce(tryGet(parameters('secrets'), 'secureList'), createArray())]"
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                      }
                    },
                    "keyVault_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_diagnosticSettings": {
                      "copy": {
                        "name": "keyVault_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_roleAssignments": {
                      "copy": {
                        "name": "keyVault_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_accessPolicies": {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "accessPolicies": {
                            "value": "[parameters('accessPolicies')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10878813547461142217"
                            },
                            "name": "Key Vault Access Policies",
                            "description": "This module deploys a Key Vault Access Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "accessPoliciesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                    }
                                  },
                                  "objectId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                    }
                                  },
                                  "applicationId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                                    }
                                  },
                                  "permissions": {
                                    "type": "object",
                                    "properties": {
                                      "keys": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "decrypt",
                                          "delete",
                                          "encrypt",
                                          "get",
                                          "getrotationpolicy",
                                          "import",
                                          "list",
                                          "purge",
                                          "recover",
                                          "release",
                                          "restore",
                                          "rotate",
                                          "setrotationpolicy",
                                          "sign",
                                          "unwrapKey",
                                          "update",
                                          "verify",
                                          "wrapKey"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to keys."
                                        }
                                      },
                                      "secrets": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "get",
                                          "list",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "set"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to secrets."
                                        }
                                      },
                                      "certificates": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "delete",
                                          "deleteissuers",
                                          "get",
                                          "getissuers",
                                          "import",
                                          "list",
                                          "listissuers",
                                          "managecontacts",
                                          "manageissuers",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "setissuers",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to certificates."
                                        }
                                      },
                                      "storage": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "deletesas",
                                          "get",
                                          "getsas",
                                          "list",
                                          "listsas",
                                          "purge",
                                          "recover",
                                          "regeneratekey",
                                          "restore",
                                          "set",
                                          "setsas",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to storage accounts."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "accessPolicies": {
                              "$ref": "#/definitions/accessPoliciesType",
                              "metadata": {
                                "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ]
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "policies": {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                              "properties": {
                                "accessPolicies": "[variables('formattedAccessPolicies')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the access policies assignment was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the access policies assignment."
                              },
                              "value": "add"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the access policies assignment."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_secrets": {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesNbf')]"
                          },
                          "contentType": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'contentType')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1877278864243602204"
                            },
                            "name": "Key Vault Secrets",
                            "description": "This module deploys a Key Vault Secret.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "contentType": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The content type of the secret."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secret": {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "value": "[parameters('value')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "secret_roleAssignments": {
                              "copy": {
                                "name": "secret_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "secret"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the secret."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_keys": {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(coalesce(parameters('keys'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                          },
                          "curveName": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')]"
                          },
                          "keyOps": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                          },
                          "keySize": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize')]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "rotationPolicy": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5903918450419813264"
                            },
                            "name": "Key Vault Keys",
                            "description": "This module deploys a Key Vault Key.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the key."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256",
                              "allowedValues": [
                                "P-256",
                                "P-256K",
                                "P-384",
                                "P-521"
                              ],
                              "metadata": {
                                "description": "Optional. The elliptic curve name."
                              }
                            },
                            "keyOps": {
                              "type": "array",
                              "nullable": true,
                              "allowedValues": [
                                "decrypt",
                                "encrypt",
                                "import",
                                "sign",
                                "unwrapKey",
                                "verify",
                                "wrapKey"
                              ],
                              "metadata": {
                                "description": "Optional. Array of JsonWebKeyOperation."
                              }
                            },
                            "keySize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                              }
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC",
                              "allowedValues": [
                                "EC",
                                "EC-HSM",
                                "RSA",
                                "RSA-HSM"
                              ],
                              "metadata": {
                                "description": "Optional. The type of the key."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key rotation policy properties object."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "key": {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[parameters('keySize')]",
                                "kty": "[parameters('kty')]",
                                "rotationPolicy": "[parameters('rotationPolicy')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "key_roleAssignments": {
                              "copy": {
                                "name": "key_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "key"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_privateEndpoints": {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4120048060064073955"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "11244630631275470040"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference('keyVault').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "subnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('flavor'), 'DataOps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "addsVmDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "windowsAdminUsername": {
            "value": "[parameters('windowsAdminUsername')]"
          },
          "windowsAdminPassword": {
            "value": "[parameters('windowsAdminPassword')]"
          },
          "addsDomainName": {
            "value": "[parameters('addsDomainName')]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "templateBaseUrl": {
            "value": "[variables('templateBaseUrl')]"
          },
          "azureLocation": {
            "value": "[parameters('location')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "6158909554667476108"
            }
          },
          "parameters": {
            "addsDomainName": {
              "type": "string",
              "defaultValue": "jumpstart.local",
              "metadata": {
                "description": "The FQDN of the domain"
              }
            },
            "clientVMName": {
              "type": "string",
              "defaultValue": "[format('{0}-ADDS', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of your Virtual Machine"
              }
            },
            "windowsAdminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "Username for the Virtual Machine"
              }
            },
            "windowsAdminPassword": {
              "type": "securestring",
              "minLength": 12,
              "maxLength": 123,
              "metadata": {
                "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long."
              }
            },
            "windowsOSVersion": {
              "type": "string",
              "defaultValue": "2022-datacenter-g2",
              "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version"
              }
            },
            "azureLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_B2ms",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Azure Bastion"
              }
            },
            "templateBaseUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Base URL for ARM template"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "networkInterfaceName": "[format('{0}-NIC', parameters('clientVMName'))]",
            "virtualNetworkName": "[format('{0}-VNet', parameters('namingPrefix'))]",
            "dcSubnetName": "[format('{0}-DC-Subnet', parameters('namingPrefix'))]",
            "addsPrivateIPAddress": "10.16.2.100",
            "bastionName": "[format('{0}-Bastion', parameters('namingPrefix'))]",
            "osDiskType": "Premium_LRS",
            "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('dcSubnetName'))]",
            "networkInterfaceRef": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
            "publicIpAddressName": "[if(not(parameters('deployBastion')), format('{0}-PIP', parameters('clientVMName')), format('{0}-PIP', variables('bastionName')))]",
            "PublicIPNoBastion": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-01-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "[variables('subnetRef')]"
                      },
                      "privateIPAllocationMethod": "Static",
                      "privateIPAddress": "[variables('addsPrivateIPAddress')]",
                      "publicIPAddress": "[if(not(parameters('deployBastion')), variables('PublicIPNoBastion'), null())]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
              ]
            },
            {
              "condition": "[not(parameters('deployBastion'))]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('publicIpAddressName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Basic",
                "tier": "Regional"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('clientVMName')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "name": "[format('{0}-OSDisk', parameters('clientVMName'))]",
                    "caching": "ReadWrite",
                    "createOption": "fromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    },
                    "diskSizeGB": 1024
                  },
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "[parameters('windowsOSVersion')]",
                    "version": "latest"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[variables('networkInterfaceRef')]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('clientVMName')]",
                  "adminUsername": "[parameters('windowsAdminUsername')]",
                  "adminPassword": "[parameters('windowsAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('clientVMName'), 'DeployADDS')]",
              "location": "[parameters('azureLocation')]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                  "fileUris": [
                    "[uri(parameters('templateBaseUrl'), 'artifacts/SetupADDS.ps1')]"
                  ],
                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Bypass -File SetupADDS.ps1 -domainName {0} -domainAdminUsername {1} -domainAdminPassword {2} -templateBaseUrl {3}', parameters('addsDomainName'), parameters('windowsAdminUsername'), parameters('windowsAdminPassword'), parameters('templateBaseUrl'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('clientVMName'))]"
              ]
            }
          ],
          "outputs": {
            "scriptfile": {
              "type": "string",
              "value": "[uri(parameters('templateBaseUrl'), 'artifacts/SetupADDS.ps1')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('flavor'), 'DataOps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "updateVNetDNSServers",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[parameters('logAnalyticsWorkspaceName')]"
          },
          "flavor": {
            "value": "[parameters('flavor')]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "dnsServers": {
            "value": [
              "10.16.2.100",
              "168.63.129.16"
            ]
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "1172818642563861188"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "[format('{0}-VNet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the VNet"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "aksSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "dcSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-DC-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Domain Controller subnet in the virtual network"
              }
            },
            "drVirtualNetworkName": {
              "type": "string",
              "defaultValue": "[format('{0}-DR-VNet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the DR VNet"
              }
            },
            "drSubnetName": {
              "type": "string",
              "defaultValue": "[format('{0}-DR-Subnet', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the DR subnet in the DR virtual network"
              }
            },
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name for your log analytics workspace"
              }
            },
            "flavor": {
              "type": "string",
              "allowedValues": [
                "ITPro",
                "DevOps",
                "DataOps"
              ],
              "metadata": {
                "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro'"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure Region to deploy the Log Analytics Workspace"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "pergb2018",
              "metadata": {
                "description": "SKU, leave default pergb2018"
              }
            },
            "deployBastion": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choice to deploy Bastion to connect to the client VM"
              }
            },
            "bastionSku": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Basic",
                "Standard",
                "Developer"
              ],
              "metadata": {
                "description": "Bastion host Sku name"
              }
            },
            "networkSecurityGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-NSG', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Network Security Group"
              }
            },
            "bastionNetworkSecurityGroupName": {
              "type": "string",
              "defaultValue": "[format('{0}-Bastion-NSG', parameters('namingPrefix'))]",
              "metadata": {
                "description": "Name of the Bastion Network Security Group"
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "DNS Server configuration"
              }
            },
            "resourceTags": {
              "type": "object",
              "defaultValue": {
                "Solution": "jumpstart_arcbox"
              },
              "metadata": {
                "description": "Tags to assign for all ArcBox resources"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "keyVaultName": "[toLower(format('{0}{1}', parameters('namingPrefix'), uniqueString(resourceGroup().id)))]",
            "security": {
              "name": "[format('Security({0})', parameters('workspaceName'))]",
              "galleryName": "Security"
            },
            "subnetAddressPrefix": "10.16.1.0/24",
            "addressPrefix": "10.16.0.0/16",
            "aksSubnetPrefix": "10.16.76.0/22",
            "dcSubnetPrefix": "10.16.2.0/24",
            "drAddressPrefix": "172.16.0.0/16",
            "drSubnetPrefix": "172.16.128.0/17",
            "bastionSubnetName": "AzureBastionSubnet",
            "bastionSubnetRef": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), variables('bastionSubnetName'))]",
            "bastionName": "[format('{0}-Bastion', parameters('namingPrefix'))]",
            "bastionSubnetIpPrefix": "10.16.3.64/26",
            "bastionPublicIpAddressName": "[format('{0}-PIP', variables('bastionName'))]",
            "primarySubnet": [
              {
                "name": "[parameters('subnetName')]",
                "properties": {
                  "addressPrefix": "[variables('subnetAddressPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ],
            "bastionSubnet": "[if(not(equals(parameters('bastionSku'), 'Developer')), createArray(createObject('name', 'AzureBastionSubnet', 'properties', createObject('addressPrefix', variables('bastionSubnetIpPrefix'), 'networkSecurityGroup', createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName')))))), createArray())]",
            "dataOpsSubnets": [
              {
                "name": "[parameters('aksSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('aksSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              },
              {
                "name": "[parameters('dcSubnetName')]",
                "properties": {
                  "addressPrefix": "[variables('dcSubnetPrefix')]",
                  "privateEndpointNetworkPolicies": "Enabled",
                  "privateLinkServiceNetworkPolicies": "Enabled",
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('addressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": "[if(and(equals(parameters('deployBastion'), false()), not(equals(parameters('flavor'), 'DataOps'))), variables('primarySubnet'), if(and(equals(parameters('deployBastion'), false()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('dataOpsSubnets')), if(and(equals(parameters('deployBastion'), true()), not(equals(parameters('flavor'), 'DataOps'))), union(variables('primarySubnet'), variables('bastionSubnet')), if(and(equals(parameters('deployBastion'), true()), equals(parameters('flavor'), 'DataOps')), union(variables('primarySubnet'), variables('bastionSubnet'), variables('dataOpsSubnets')), variables('primarySubnet')))))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNetworkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-01-01",
              "name": "[parameters('drVirtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[variables('drAddressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServers')]"
                },
                "subnets": [
                  {
                    "name": "[parameters('drSubnetName')]",
                    "properties": {
                      "addressPrefix": "[variables('drSubnetPrefix')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'peering-to-DR-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('flavor'), 'DataOps')]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2022-01-01",
              "name": "[format('{0}/{1}', parameters('drVirtualNetworkName'), 'peering-to-primary-vnet')]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('drVirtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow_k8s_80",
                    "properties": {
                      "priority": 1003,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "80"
                    }
                  },
                  {
                    "name": "allow_k8s_8080",
                    "properties": {
                      "priority": 1004,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "8080"
                    }
                  },
                  {
                    "name": "allow_k8s_443",
                    "properties": {
                      "priority": 1005,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "allow_k8s_kubelet",
                    "properties": {
                      "priority": 1006,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "10250"
                    }
                  },
                  {
                    "name": "allow_traefik_lb_external",
                    "properties": {
                      "priority": 1007,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "32323"
                    }
                  },
                  {
                    "name": "allow_SQLMI_traffic",
                    "properties": {
                      "priority": 1008,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "11433"
                    }
                  },
                  {
                    "name": "allow_Postgresql_traffic",
                    "properties": {
                      "priority": 1009,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "15432"
                    }
                  },
                  {
                    "name": "allow_SQLMI_mirroring_traffic",
                    "properties": {
                      "priority": 1012,
                      "protocol": "TCP",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "5022"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-01-01",
              "name": "[parameters('bastionNetworkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "bastion_allow_https_inbound",
                    "properties": {
                      "priority": 1010,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "Internet",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_gateway_manager_inbound",
                    "properties": {
                      "priority": 1011,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "GatewayManager",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_load_balancer_inbound",
                    "properties": {
                      "priority": 1012,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_host_comms",
                    "properties": {
                      "priority": 1013,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_ssh_rdp_outbound",
                    "properties": {
                      "priority": 1014,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "22",
                        "3389"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_azure_cloud_outbound",
                    "properties": {
                      "priority": 1015,
                      "protocol": "Tcp",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "AzureCloud",
                      "destinationPortRange": "443"
                    }
                  },
                  {
                    "name": "bastion_allow_bastion_comms",
                    "properties": {
                      "priority": 1016,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRanges": [
                        "8080",
                        "5701"
                      ]
                    }
                  },
                  {
                    "name": "bastion_allow_get_session_info",
                    "properties": {
                      "priority": 1017,
                      "protocol": "*",
                      "access": "Allow",
                      "direction": "Outbound",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRanges": [
                        "80",
                        "443"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('sku')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('security').name]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              },
              "plan": {
                "name": "[variables('security').name]",
                "promotionCode": "",
                "product": "[format('OMSGallery/{0}', variables('security').galleryName)]",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-01-01",
              "name": "[variables('bastionPublicIpAddressName')]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4",
                "idleTimeoutInMinutes": 4
              },
              "sku": {
                "name": "Standard"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            },
            {
              "condition": "[equals(parameters('deployBastion'), true())]",
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2023-11-01",
              "name": "[variables('bastionName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('bastionSku')]"
              },
              "properties": {
                "virtualNetwork": "[if(equals(parameters('bastionSku'), 'Developer'), createObject('id', resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))), null())]",
                "ipConfigurations": "[if(not(equals(parameters('bastionSku'), 'Developer')), createArray(createObject('name', 'IpConf', 'properties', createObject('publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))), 'subnet', createObject('id', variables('bastionSubnetRef'))))), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIpAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "policyDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureLocation": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                  },
                  "flavor": {
                    "value": "[parameters('flavor')]"
                  },
                  "resourceTags": {
                    "value": "[parameters('resourceTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9222970623693331004"
                    }
                  },
                  "parameters": {
                    "azureLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Location of your Azure resources"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of your log analytics workspace"
                      }
                    },
                    "flavor": {
                      "type": "string",
                      "metadata": {
                        "description": "The flavor of ArcBox you want to deploy. Valid values are: 'Full', 'ITPro', 'DevOps'"
                      }
                    },
                    "resourceTags": {
                      "type": "object",
                      "defaultValue": {
                        "Solution": "jumpstart_arcbox"
                      },
                      "metadata": {
                        "description": "Tags to assign for all ArcBox resources"
                      }
                    },
                    "azureUpdateManagerArcPolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/bfea026e-043f-4ff4-9d1b-bf301ca7ff46"
                    },
                    "azureUpdateManagerAzurePolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/59efceea-0c96-497e-a4a1-4eb2290dac15"
                    },
                    "sshPostureControlAzurePolicyId": {
                      "type": "string",
                      "defaultValue": "/providers/Microsoft.Authorization/policyDefinitions/a8f3e6a6-dcd2-434c-b0f7-6f309ce913b4"
                    },
                    "tagsRoleDefinitionId": {
                      "type": "string",
                      "defaultValue": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]"
                    }
                  },
                  "variables": {
                    "policies": [
                      {
                        "name": "(ArcBox) Enable Azure Monitor for Hybrid VMs with AMA",
                        "definitionId": "/providers/Microsoft.Authorization/policySetDefinitions/59e9c3eb-d8df-473b-8059-23fd38ddd0f0",
                        "flavors": [
                          "Full",
                          "ITPro"
                        ],
                        "roleDefinition": [
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293', subscription().subscriptionId)]",
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302', subscription().subscriptionId)]",
                          "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa', subscription().subscriptionId)]"
                        ],
                        "parameters": {
                          "logAnalyticsWorkspace": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "enableProcessesAndDependencies": {
                            "value": true
                          }
                        }
                      },
                      {
                        "name": "(ArcBox) Enable Microsoft Defender on Kubernetes clusters",
                        "definitionId": "/providers/Microsoft.Authorization/policyDefinitions/708b60a6-d253-4fe0-9114-4be4c00f012c",
                        "flavors": [
                          "Full",
                          "DevOps"
                        ],
                        "roleDefinition": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293', subscription().subscriptionId)]",
                        "parameters": {}
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policies_name",
                        "count": "[length(variables('policies'))]"
                      },
                      "condition": "[contains(variables('policies')[copyIndex()].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('policies')[copyIndex()].name]",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "policyDefinitionId": "[variables('policies')[copyIndex()].definitionId]",
                        "parameters": "[variables('policies')[copyIndex()].parameters]"
                      }
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[0], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[0]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[1], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[1]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[0].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[0].name, variables('policies')[0].roleDefinition[2], resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[0].roleDefinition[2]]",
                        "principalId": "[if(contains(variables('policies')[0].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[0].name)]"
                      ]
                    },
                    {
                      "condition": "[contains(variables('policies')[1].flavors, parameters('flavor'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(variables('policies')[1].name, variables('policies')[1].roleDefinition, resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[variables('policies')[1].roleDefinition]",
                        "principalId": "[if(contains(variables('policies')[1].flavors, parameters('flavor')), reference(resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[1].name), '2021-06-01', 'full').identity.principalId, guid(format('policies_name_id{0}', 0)))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('policies')[1].name)]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "applyCustomTags",
                        "count": "[length(items(parameters('resourceTags')))]"
                      },
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "[format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key)]",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/4f9dc7db-30c1-420c-b61a-e1d640128d26",
                        "parameters": {
                          "tagName": {
                            "value": "[items(parameters('resourceTags'))[copyIndex()].key]"
                          },
                          "tagValue": {
                            "value": "[items(parameters('resourceTags'))[copyIndex()].value]"
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "policy_tagging_resources",
                        "count": "[length(items(parameters('resourceTags')))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "name": "[guid(format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key), parameters('tagsRoleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('tagsRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key)), '2021-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key))]",
                        "[resourceId('Microsoft.Authorization/policyAssignments', format('(ArcBox) Tag resources-{0}', items(parameters('resourceTags'))[copyIndex()].key))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Linux hybrid machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Arc-enabled Linux machines",
                        "description": "Enable Azure Update Manager for Arc-enabled machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerArcPolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Linux"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Windows hybrid machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Arc-enabled Windows machines",
                        "description": "Enable Azure Update Manager for Arc-enabled machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerArcPolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Windows"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Azure Windows machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Azure Windows machines",
                        "description": "Enable Azure Update Manager for Azure machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerAzurePolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Windows"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable Azure Update Manager for Azure Linux machines",
                      "location": "[parameters('azureLocation')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "(ArcBox) Enable Azure Update Manager for Azure Linux machines",
                        "description": "Enable Azure Update Manager for Azure machines",
                        "policyDefinitionId": "[parameters('azureUpdateManagerAzurePolicyId')]",
                        "parameters": {
                          "osType": {
                            "value": "Linux"
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2024-04-01",
                      "name": "(ArcBox) Enable SSH Posture Control audit",
                      "location": "[parameters('azureLocation')]",
                      "properties": {
                        "displayName": "(ArcBox) Enable SSH Posture Control audit",
                        "description": "Enable SSH Posture Control in audit mode",
                        "policyDefinitionId": "[parameters('sshPostureControlAzurePolicyId')]",
                        "parameters": {
                          "IncludeArcMachines": {
                            "value": "true"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVaultDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[toLower(variables('keyVaultName'))]"
                  },
                  "enablePurgeProtection": {
                    "value": false
                  },
                  "enableSoftDelete": {
                    "value": false
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12538315610403519820"
                    },
                    "name": "Key Vaults",
                    "description": "This module deploys a Key Vault.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "accessPoliciesType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                            }
                          },
                          "objectId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                            }
                          },
                          "applicationId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                            }
                          },
                          "permissions": {
                            "type": "object",
                            "properties": {
                              "keys": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "decrypt",
                                  "delete",
                                  "encrypt",
                                  "get",
                                  "getrotationpolicy",
                                  "import",
                                  "list",
                                  "purge",
                                  "recover",
                                  "release",
                                  "restore",
                                  "rotate",
                                  "setrotationpolicy",
                                  "sign",
                                  "unwrapKey",
                                  "update",
                                  "verify",
                                  "wrapKey"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to keys."
                                }
                              },
                              "secrets": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "get",
                                  "list",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "set"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to secrets."
                                }
                              },
                              "certificates": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "delete",
                                  "deleteissuers",
                                  "get",
                                  "getissuers",
                                  "import",
                                  "list",
                                  "listissuers",
                                  "managecontacts",
                                  "manageissuers",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "setissuers",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to certificates."
                                }
                              },
                              "storage": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "deletesas",
                                  "get",
                                  "getsas",
                                  "list",
                                  "listsas",
                                  "purge",
                                  "recover",
                                  "regeneratekey",
                                  "restore",
                                  "set",
                                  "setsas",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to storage accounts."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "$ref": "#/definitions/accessPoliciesType",
                      "metadata": {
                        "description": "Optional. All access policies to create."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                        "input": {
                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                        }
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "secretList": "[coalesce(tryGet(parameters('secrets'), 'secureList'), createArray())]"
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "keyVault": {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('sku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                      }
                    },
                    "keyVault_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_diagnosticSettings": {
                      "copy": {
                        "name": "keyVault_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_roleAssignments": {
                      "copy": {
                        "name": "keyVault_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_accessPolicies": {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "accessPolicies": {
                            "value": "[parameters('accessPolicies')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10878813547461142217"
                            },
                            "name": "Key Vault Access Policies",
                            "description": "This module deploys a Key Vault Access Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "accessPoliciesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                    }
                                  },
                                  "objectId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                    }
                                  },
                                  "applicationId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                                    }
                                  },
                                  "permissions": {
                                    "type": "object",
                                    "properties": {
                                      "keys": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "decrypt",
                                          "delete",
                                          "encrypt",
                                          "get",
                                          "getrotationpolicy",
                                          "import",
                                          "list",
                                          "purge",
                                          "recover",
                                          "release",
                                          "restore",
                                          "rotate",
                                          "setrotationpolicy",
                                          "sign",
                                          "unwrapKey",
                                          "update",
                                          "verify",
                                          "wrapKey"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to keys."
                                        }
                                      },
                                      "secrets": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "get",
                                          "list",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "set"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to secrets."
                                        }
                                      },
                                      "certificates": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "delete",
                                          "deleteissuers",
                                          "get",
                                          "getissuers",
                                          "import",
                                          "list",
                                          "listissuers",
                                          "managecontacts",
                                          "manageissuers",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "setissuers",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to certificates."
                                        }
                                      },
                                      "storage": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "deletesas",
                                          "get",
                                          "getsas",
                                          "list",
                                          "listsas",
                                          "purge",
                                          "recover",
                                          "regeneratekey",
                                          "restore",
                                          "set",
                                          "setsas",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to storage accounts."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "accessPolicies": {
                              "$ref": "#/definitions/accessPoliciesType",
                              "metadata": {
                                "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ]
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "policies": {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                              "properties": {
                                "accessPolicies": "[variables('formattedAccessPolicies')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the access policies assignment was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the access policies assignment."
                              },
                              "value": "add"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the access policies assignment."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_secrets": {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesNbf')]"
                          },
                          "contentType": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'contentType')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(variables('secretList')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1877278864243602204"
                            },
                            "name": "Key Vault Secrets",
                            "description": "This module deploys a Key Vault Secret.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "contentType": {
                              "type": "securestring",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The content type of the secret."
                              }
                            },
                            "value": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secret": {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "value": "[parameters('value')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "secret_roleAssignments": {
                              "copy": {
                                "name": "secret_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "secret"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secret."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the secret."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_keys": {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(coalesce(parameters('keys'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                          },
                          "attributesExp": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                          },
                          "attributesNbf": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                          },
                          "curveName": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')]"
                          },
                          "keyOps": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                          },
                          "keySize": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize')]"
                          },
                          "kty": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "rotationPolicy": {
                            "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5903918450419813264"
                            },
                            "name": "Key Vault Keys",
                            "description": "This module deploys a Key Vault Key.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the key."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256",
                              "allowedValues": [
                                "P-256",
                                "P-256K",
                                "P-384",
                                "P-521"
                              ],
                              "metadata": {
                                "description": "Optional. The elliptic curve name."
                              }
                            },
                            "keyOps": {
                              "type": "array",
                              "nullable": true,
                              "allowedValues": [
                                "decrypt",
                                "encrypt",
                                "import",
                                "sign",
                                "unwrapKey",
                                "verify",
                                "wrapKey"
                              ],
                              "metadata": {
                                "description": "Optional. Array of JsonWebKeyOperation."
                              }
                            },
                            "keySize": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                              }
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC",
                              "allowedValues": [
                                "EC",
                                "EC-HSM",
                                "RSA",
                                "RSA-HSM"
                              ],
                              "metadata": {
                                "description": "Optional. The type of the key."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "rotationPolicy": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key rotation policy properties object."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "key": {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[parameters('attributesExp')]",
                                  "nbf": "[parameters('attributesNbf')]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[parameters('keySize')]",
                                "kty": "[parameters('kty')]",
                                "rotationPolicy": "[parameters('rotationPolicy')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "key_roleAssignments": {
                              "copy": {
                                "name": "key_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "key"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "keyVault_privateEndpoints": {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4120048060064073955"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "11244630631275470040"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[parameters('name')]"
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "The URI of the key vault."
                      },
                      "value": "[reference('keyVault').vaultUri]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'policyDeployment')]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "subnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2022-01-01').subnets[0].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'addsVmDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]"
      ]
    },
    {
      "condition": "[equals(parameters('flavor'), 'DataOps')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aksDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sshRSAPublicKey": {
            "value": "[parameters('sshRSAPublicKey')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aksClusterName": {
            "value": "[variables('aksArcDataClusterName')]"
          },
          "drClusterName": {
            "value": "[variables('aksDrArcDataClusterName')]"
          },
          "namingPrefix": {
            "value": "[parameters('namingPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "1398021495301668101"
            }
          },
          "parameters": {
            "aksClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-Data', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the Kubernetes cluster resource"
              }
            },
            "drClusterName": {
              "type": "string",
              "defaultValue": "[format('{0}-AKS-DR-Data', parameters('namingPrefix'))]",
              "metadata": {
                "description": "The name of the Kubernetes cluster resource"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Managed Cluster resource"
              }
            },
            "dnsPrefixPrimary": {
              "type": "string",
              "defaultValue": "arcdata",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN"
              }
            },
            "dnsPrefixSecondary": {
              "type": "string",
              "defaultValue": "arcdata",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN"
              }
            },
            "osDiskSizeGB": {
              "type": "int",
              "defaultValue": 0,
              "minValue": 0,
              "maxValue": 1023,
              "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize"
              }
            },
            "agentCount": {
              "type": "int",
              "defaultValue": 3,
              "minValue": 1,
              "maxValue": 50,
              "metadata": {
                "description": "The number of nodes for the cluster"
              }
            },
            "agentVMSize": {
              "type": "string",
              "defaultValue": "Standard_D8s_v4",
              "metadata": {
                "description": "The size of the Virtual Machine"
              }
            },
            "linuxAdminUsername": {
              "type": "string",
              "defaultValue": "arcdemo",
              "metadata": {
                "description": "User name for the Linux Virtual Machines"
              }
            },
            "sshRSAPublicKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "RSA public key used for securing SSH access to ArcBox resources. This parameter is only needed when deploying the DataOps or DevOps flavors."
              }
            },
            "enableRBAC": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "boolean flag to turn on and off of RBAC"
              }
            },
            "osType": {
              "type": "string",
              "defaultValue": "Linux",
              "allowedValues": [
                "Linux"
              ],
              "metadata": {
                "description": "The type of operating system"
              }
            },
            "kubernetesVersion": {
              "type": "string",
              "defaultValue": "1.28.9",
              "metadata": {
                "description": "The version of Kubernetes"
              }
            },
            "namingPrefix": {
              "type": "string",
              "defaultValue": "ArcBox",
              "maxLength": 7,
              "metadata": {
                "description": "The naming prefix for the nested virtual machines. Example: ArcBox-Win2k19"
              }
            }
          },
          "variables": {
            "serviceCidr_primary": "10.20.64.0/19",
            "dnsServiceIP_primary": "10.20.64.10",
            "serviceCidr_secondary": "172.20.64.0/19",
            "dnsServiceIP_secondary": "172.20.64.10",
            "virtualNetworkName": "[format('{0}-VNet', parameters('namingPrefix'))]",
            "aksSubnetName": "[format('{0}-AKS-Subnet', parameters('namingPrefix'))]",
            "drVirtualNetworkName": "[format('{0}-DR-VNet', parameters('namingPrefix'))]",
            "drSubnetName": "[format('{0}-DR-Subnet', parameters('namingPrefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2024-02-02-preview",
              "name": "[parameters('aksClusterName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefixPrimary')]",
                "aadProfile": {
                  "managed": true
                },
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "mode": "System",
                    "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                    "count": "[parameters('agentCount')]",
                    "vmSize": "[parameters('agentVMSize')]",
                    "osType": "[parameters('osType')]",
                    "type": "VirtualMachineScaleSets",
                    "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('aksSubnetName'))]"
                  }
                ],
                "storageProfile": {
                  "diskCSIDriver": {
                    "enabled": true
                  }
                },
                "networkProfile": {
                  "networkPlugin": "azure",
                  "serviceCidr": "[variables('serviceCidr_primary')]",
                  "dnsServiceIP": "[variables('dnsServiceIP_primary')]"
                },
                "linuxProfile": {
                  "adminUsername": "[parameters('linuxAdminUsername')]",
                  "ssh": {
                    "publicKeys": [
                      {
                        "keyData": "[parameters('sshRSAPublicKey')]"
                      }
                    ]
                  }
                },
                "autoUpgradeProfile": {
                  "upgradeChannel": "stable",
                  "nodeOSUpgradeChannel": "NodeImage"
                }
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2024-02-02-preview",
              "name": "[parameters('drClusterName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefixSecondary')]",
                "aadProfile": {
                  "managed": true
                },
                "agentPoolProfiles": [
                  {
                    "name": "agentpool",
                    "mode": "System",
                    "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                    "count": "[parameters('agentCount')]",
                    "vmSize": "[parameters('agentVMSize')]",
                    "osType": "[parameters('osType')]",
                    "type": "VirtualMachineScaleSets",
                    "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('drVirtualNetworkName'), variables('drSubnetName'))]"
                  }
                ],
                "storageProfile": {
                  "diskCSIDriver": {
                    "enabled": true
                  }
                },
                "networkProfile": {
                  "networkPlugin": "azure",
                  "serviceCidr": "[variables('serviceCidr_secondary')]",
                  "dnsServiceIP": "[variables('dnsServiceIP_secondary')]"
                },
                "linuxProfile": {
                  "adminUsername": "[parameters('linuxAdminUsername')]",
                  "ssh": {
                    "publicKeys": [
                      {
                        "keyData": "[parameters('sshRSAPublicKey')]"
                      }
                    ]
                  }
                },
                "autoUpgradeProfile": {
                  "upgradeChannel": "stable",
                  "nodeOSUpgradeChannel": "NodeImage"
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName')), '2023-10-02-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('aksClusterName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerService/managedClusters', parameters('drClusterName')), 'Microsoft.Authorization/roleAssignments', 'Owner')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('drClusterName')), '2023-10-02-preview', 'full').identity.principalId]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', parameters('drClusterName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'mgmtArtifactsAndPolicyDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'stagingStorageAccountDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'updateVNetDNSServers')]"
      ]
    }
  ],
  "outputs": {
    "clientVmLogonUserName": {
      "type": "string",
      "value": "[if(equals(parameters('flavor'), 'DataOps'), format('{0}@{1}', parameters('windowsAdminUsername'), parameters('addsDomainName')), '')]"
    }
  }
}
