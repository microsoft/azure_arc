# Injecting environment variables
$env:AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
$env:AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
$env:spnClientId="${spnClientId}"
$env:spnClientSecret="${spnClientSecret}"
$env:spnTenantId="${spnTenantId}"
$env:customLocationOid="${customLocationOid}"
$env:spnAuthority="${spnAuthority}"
$env:AZDATA_USERNAME="${AZDATA_USERNAME}"
$env:AZDATA_PASSWORD="${AZDATA_PASSWORD}"
$env:ACCEPT_EULA="${ACCEPT_EULA}"
$env:arcDcName="${arcDcName}"
$env:subscriptionId="${subscriptionId}"
$env:resourceGroup="${resourceGroup}"
$env:azureLocation="${azureLocation}"
$env:deploySQLMI="${deploySQLMI}"
$env:deployPostgreSQL="${deployPostgreSQL}"
$env:templateBaseUrl="${templateBaseUrl}"

[System.Environment]::SetEnvironmentVariable('AWS_ACCESS_KEY_ID', $env:AWS_ACCESS_KEY_ID,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AWS_SECRET_ACCESS_KEY', $env:AWS_SECRET_ACCESS_KEY,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('spnClientId', $env:spnClientId,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('spnClientSecret', $env:spnClientSecret,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('spnTenantId', $env:spnTenantId,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('customLocationOid', $env:customLocationOid,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('spnAuthority', $env:spnAuthority,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AZDATA_USERNAME', $env:AZDATA_USERNAME,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('AZDATA_PASSWORD', $env:AZDATA_PASSWORD,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('ACCEPT_EULA', $env:ACCEPT_EULA,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('arcDcName', $env:arcDcName,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('subscriptionId', $env:subscriptionId,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('resourceGroup', $env:resourceGroup,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('azureLocation', $env:azureLocation,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('deploySQLMI', $env:deploySQLMI,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('deployPostgreSQL', $env:deployPostgreSQL,[System.EnvironmentVariableTarget]::Machine)
[System.Environment]::SetEnvironmentVariable('templateBaseUrl', $env:templateBaseUrl,[System.EnvironmentVariableTarget]::Machine)

# This EC2 Instance uses the out-of-the-box Administrator account
# Therefore, we set $env:USERNAME (i.e. Administrator) to $env:adminUsername, as this variable is used going forward in downstream scripts
[System.Environment]::SetEnvironmentVariable('adminUsername', $env:USERNAME,[System.EnvironmentVariableTarget]::Machine)