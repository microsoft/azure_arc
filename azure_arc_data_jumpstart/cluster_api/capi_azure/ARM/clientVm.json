{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "myIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Your public IP address, used to RDP to the client VM"
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "Arc-Data-Client",
      "metadata": {
        "description": "The name of your Virtual Machine"
      }
    },
    "ArcK8sClusterName": {
      "type": "string",
      "defaultValue": "Arc-DataSvc-CAPI",
      "metadata": {
      "description": "The name of the Cluster API workload cluster to be connected as an Azure Arc-enabled Kubernetes cluster (lowercase)"
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "defaultValue": "arcdemo",
      "metadata": {
        "description": "Username for the Virtual Machine"
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "minLength": 12,
      "maxLength": 123,
      "defaultValue": "ArcPassword123!!",
      "metadata": {
        "description": "Password for Windows account. Password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. The value must be between 12 and 123 characters long."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2022-datacenter-g2",
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version"
      }
    },
    "azureLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v4",
      "metadata": {
        "description": "The size of the VM"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "Arc-Data-VNet",
      "metadata": {
        "description": "Name of the VNET"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "Arc-Data-Subnet",
      "metadata": {
        "description": "Name of the subnet in the virtual network"
      }
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "Arc-Data-Client-NSG",
      "metadata": {
        "description": "Name of the Network Security Group"
      }
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {
        "Project": "jumpstart_azure_arc_data_services"
      }
    },
    "spnClientId": {
      "type": "string",
      "metadata": {
        "description": "Client id of the service principal"
      }
    },
    "spnClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client secret of the service principal"
      }
    },
    "spnAuthority": {
      "type": "string",
      "defaultValue": "https://login.microsoftonline.com"
    },
    "spnTenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant id of the service principal"
      }
    },
    "azdataUsername": {
      "type": "string",
      "defaultValue": "arcdemo"
    },
    "azdataPassword": {
      "type": "securestring",
      "defaultValue": "ArcPassword123!!"
    },
    "acceptEula": {
      "type": "string",
      "defaultValue": "yes"
    },
    "arcDcName": {
      "type": "string",
      "defaultValue": "arcdatactrl"
    },
    "stagingStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name for the staging storage account using to hold kubeconfig. This value is passed into the template as an output from mgmtStagingStorage.json"
      }
    },
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name for the environment Azure Log Analytics workspace"
      }
    },
    "deploySQLMI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "SQL Managed Instance deployment"
      }
    },
    "SQLMIHA": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "SQL Managed Instance high-availability deployment"
      }
    },    
    "deployPostgreSQL": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "PostgreSQL Hyperscale deployment"
      }
    },
    "templateBaseUrl": {
      "type": "string",
      "metadata": {
        "description": "Base URL for ARM template"
      }
    },
    "bastionSubnetRef": {
      "type": "string",
      "metadata": {
        "description": "Azure Bastion subnet reference"
      }
    },
    "deployBastion": {
      "type": "bool",
      "metadata": {
        "description": "Choice to deploy Bastion to connect to the client VM"
      },
      "defaultValue": false
    },
    "bastionHostName": {
      "type": "string",
      "defaultValue": "Arc-Win-Demo-Bastion",
      "metadata": {
        "description": "Azure Bastion host name"
      }
    },
    "bastionSubnetPrefix": {
      "type": "string",
      "metadata": {
        "description": "Azure Bastion subnet IP prefix"
      }
    }
  },
  "variables": {
    "vmName": "[concat(parameters('vmName'))]",
    "publicIpAddressName": "[concat(parameters('vmName'), '-PIP' )]",
    "networkInterfaceName": "[concat(parameters('vmName'),'-NIC')]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "osDiskType": "Premium_LRS",
    "bastionSubnetRef": "[concat(parameters('bastionSubnetRef'))]",
    "bastionSubnetPrefix": "[concat(parameters('bastionSubnetPrefix'))]",
    "PublicIPNoBastion": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2021-05-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[parameters('azureLocation')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
        "[resourceId('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": "[if(not(parameters('deployBastion')),variables('PublicIPNoBastion'),json('null'))]"
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups',parameters('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-05-01",
      "name": "[parameters('networkSecurityGroupName')]",
      "location": "[parameters('azureLocation')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_RDP_3389",
            "properties": {
              "priority": 1001,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "[if(parameters('deployBastion'),variables('bastionSubnetPrefix'),parameters('myIpAddress'))]",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2021-05-01",
      "name": "[variables('publicIpAddressName')]",
      "location": "[parameters('azureLocation')]",
      "properties": {
        "publicIpAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4",
        "idleTimeoutInMinutes": 4
      },
      "sku": {
        "name": "[if(not(parameters('deployBastion')),'Basic','Standard')]",
        "tier": "Regional"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-07-01",
      "name": "[variables('vmName')]",
      "location": "[parameters('azureLocation')]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('vmName'),'-OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "[variables('osDiskType')]"
            },
            "diskSizeGB": 1024
          },
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('windowsAdminUsername')]",
          "adminPassword": "[parameters('windowsAdminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": false
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/Bootstrap')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('azureLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "tags": {
        "displayName": "config-choco"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[uri(parameters('templateBaseUrl'), 'artifacts/Bootstrap.ps1')]"
          ],
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Bypass -File Bootstrap.ps1', ' -adminUsername ', parameters('windowsAdminUsername'), ' -spnClientId ', parameters('spnClientId'), ' -spnClientSecret ', parameters('spnClientSecret'), ' -spnTenantId ', parameters('spnTenantId'), ' -spnAuthority ', parameters('spnAuthority'), ' -subscriptionId ', subscription().subscriptionId, ' -resourceGroup ', resourceGroup().name, ' -azdataUsername ', parameters('azdataUsername'), ' -azdataPassword ', parameters('azdataPassword'), ' -acceptEula ', parameters('acceptEula'), ' -arcDcName ', parameters('arcDcName'), ' -azureLocation ', parameters('azureLocation'), ' -stagingStorageAccountName ', parameters('stagingStorageAccountName'), ' -workspaceName ', parameters('workspaceName'), ' -ArcK8sClusterName ', parameters('ArcK8sClusterName'), ' -deploySQLMI ', parameters('deploySQLMI'), ' -SQLMIHA ', parameters('SQLMIHA'), ' -deployPostgreSQL ', parameters('deployPostgreSQL'), ' -templateBaseUrl ', parameters('templateBaseUrl'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "condition": "[parameters('deployBastion')]",
      "name": "[parameters('bastionHostName')]",
      "location": "[parameters('azureLocation')]",
      "apiVersion": "2020-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "subnet": {
                "id": "[variables('bastionSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              }
            }
          }
        ]
      }
    }
  ],

  "outputs": {
    "adminUsername": {
      "type": "string",
      "value": "[parameters('windowsAdminUsername')]"
    },
    "publicIP": {
      "type": "string",
      "value": "[concat(reference(variables('publicIPAddressName')).IpAddress)]"
    }
  }
}
